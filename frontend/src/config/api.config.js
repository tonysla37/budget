// Configuration de l'API g√©n√©r√©e automatiquement par le script de d√©ploiement
export const API_URL = "http://127.0.0.1:8000";
export const API_TIMEOUT = 30000; // 30 secondes
export const DEFAULT_HEADERS = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
};
export const DEBUG_API_CALLS = true; // Activer les logs de debugging pour les appels API

// Mode hors-ligne - D√âCONSEILL√â
// D√©sactiv√© par d√©faut car le mode hors-ligne n'est pas recommand√©
export const DEBUG_IGNORE_BACKEND_FAILURE = false;

// Variable pour suivre l'√©tat de la connexion au backend
let isBackendAvailable = null;
let isDatabaseAvailable = null;

/**
 * Fonction pour v√©rifier si le backend est disponible
 * @param {boolean} force - Force une nouvelle v√©rification m√™me si le statut est d√©j√† connu
 * @returns {Promise<boolean>} - true si le backend est disponible, false sinon
 */
export const checkBackendStatus = async (force = false) => {
    // Si on a d√©j√† v√©rifi√© et qu'on ne force pas une nouvelle v√©rification
    if (isBackendAvailable !== null && !force) {
        console.log(`üîÑ Utilisation du statut backend en cache: ${isBackendAvailable ? 'Disponible' : 'Indisponible'}`);
        return isBackendAvailable;
    }
    
    try {
        console.log('üîç V√©rification de la connexion au backend...');
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000); // Timeout de 5 secondes
        
        const response = await fetch(`${API_URL}/api/health`, {
            method: 'GET',
            headers: DEFAULT_HEADERS,
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
            console.log('‚úÖ Connexion au backend √©tablie');
            isBackendAvailable = true;
            return true;
        } else {
            console.error(`‚ùå Erreur de connexion au backend: ${response.status} ${response.statusText}`);
            isBackendAvailable = false;
            return false;
        }
    } catch (error) {
        console.error('‚ùå Impossible de se connecter au backend:', error.message);
        console.error('‚ö†Ô∏è Le mode hors-ligne n\'est pas recommand√©. Veuillez d√©marrer le backend.');
        
        isBackendAvailable = false;
        return false;
    }
};

/**
 * Fonction pour v√©rifier si MongoDB est disponible via le backend
 * @param {boolean} force - Force une nouvelle v√©rification m√™me si le statut est d√©j√† connu
 * @returns {Promise<boolean>} - true si la base de donn√©es est disponible, false sinon
 */
export const checkDatabaseStatus = async (force = false) => {
    // Si on a d√©j√† v√©rifi√© et qu'on ne force pas une nouvelle v√©rification
    if (isDatabaseAvailable !== null && !force) {
        console.log(`üîÑ Utilisation du statut de la base de donn√©es en cache: ${isDatabaseAvailable ? 'Disponible' : 'Indisponible'}`);
        return isDatabaseAvailable;
    }
    
    try {
        console.log('üîç V√©rification de la connexion √† la base de donn√©es...');
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000); // Timeout de 5 secondes
        
        const response = await fetch(`${API_URL}/api/health/db`, {
            method: 'GET',
            headers: DEFAULT_HEADERS,
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
            console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
            isDatabaseAvailable = true;
            return true;
        } else {
            console.error(`‚ùå Erreur de connexion √† la base de donn√©es: ${response.status} ${response.statusText}`);
            isDatabaseAvailable = false;
            return false;
        }
    } catch (error) {
        console.error('‚ùå Impossible de v√©rifier le statut de la base de donn√©es:', error.message);
        console.error('‚ö†Ô∏è La connexion √† la base de donn√©es est obligatoire. Veuillez v√©rifier MongoDB.');
        
        isDatabaseAvailable = false;
        return false;
    }
}; 

/**
 * Fonction utilitaire pour basculer le mode hors-ligne
 * @param {boolean} enableOfflineMode - True pour activer le mode hors-ligne, false pour le d√©sactiver
 */
export const toggleOfflineMode = (enableOfflineMode) => {
    // Cette fonction peut √™tre appel√©e par le script de d√©ploiement pour modifier le mode hors-ligne
    console.log(`${enableOfflineMode ? 'üîå Activation' : 'üîå D√©sactivation'} du mode hors-ligne`);
    window.DEBUG_IGNORE_BACKEND_FAILURE = enableOfflineMode;
    // Reset des √©tats pour forcer une nouvelle v√©rification
    isBackendAvailable = null;
    isDatabaseAvailable = null;
}; 