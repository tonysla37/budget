{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport var API_URL = \"http://127.0.0.1:8000\";\nexport var API_TIMEOUT = 30000;\nexport var DEFAULT_HEADERS = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nexport var DEBUG_API_CALLS = true;\nexport var DEBUG_IGNORE_BACKEND_FAILURE = false;\nvar isBackendAvailable = null;\nvar isDatabaseAvailable = null;\nexport var checkBackendStatus = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (isBackendAvailable !== null && !force) {\n      console.log(\"\\uD83D\\uDD04 Utilisation du statut backend en cache: \" + (isBackendAvailable ? 'Disponible' : 'Indisponible'));\n      return isBackendAvailable;\n    }\n    try {\n      console.log('üîç V√©rification de la connexion au backend...');\n      var controller = new AbortController();\n      var timeoutId = setTimeout(function () {\n        return controller.abort();\n      }, 5000);\n      var response = yield fetch(API_URL + \"/api/health\", {\n        method: 'GET',\n        headers: DEFAULT_HEADERS,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (response.ok) {\n        console.log('‚úÖ Connexion au backend √©tablie');\n        isBackendAvailable = true;\n        return true;\n      } else {\n        console.error(\"\\u274C Erreur de connexion au backend: \" + response.status + \" \" + response.statusText);\n        isBackendAvailable = false;\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Impossible de se connecter au backend:', error.message);\n      console.error('‚ö†Ô∏è Le mode hors-ligne n\\'est pas recommand√©. Veuillez d√©marrer le backend.');\n      isBackendAvailable = false;\n      return false;\n    }\n  });\n  return function checkBackendStatus() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var checkDatabaseStatus = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (isDatabaseAvailable !== null && !force) {\n      console.log(\"\\uD83D\\uDD04 Utilisation du statut de la base de donn\\xE9es en cache: \" + (isDatabaseAvailable ? 'Disponible' : 'Indisponible'));\n      return isDatabaseAvailable;\n    }\n    try {\n      console.log('üîç V√©rification de la connexion √† la base de donn√©es...');\n      var controller = new AbortController();\n      var timeoutId = setTimeout(function () {\n        return controller.abort();\n      }, 5000);\n      var response = yield fetch(API_URL + \"/api/health/db\", {\n        method: 'GET',\n        headers: DEFAULT_HEADERS,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (response.ok) {\n        console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');\n        isDatabaseAvailable = true;\n        return true;\n      } else {\n        console.error(\"\\u274C Erreur de connexion \\xE0 la base de donn\\xE9es: \" + response.status + \" \" + response.statusText);\n        isDatabaseAvailable = false;\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Impossible de v√©rifier le statut de la base de donn√©es:', error.message);\n      console.error('‚ö†Ô∏è La connexion √† la base de donn√©es est obligatoire. Veuillez v√©rifier MongoDB.');\n      isDatabaseAvailable = false;\n      return false;\n    }\n  });\n  return function checkDatabaseStatus() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var toggleOfflineMode = function toggleOfflineMode(enableOfflineMode) {\n  console.log((enableOfflineMode ? 'üîå Activation' : 'üîå D√©sactivation') + \" du mode hors-ligne\");\n  window.DEBUG_IGNORE_BACKEND_FAILURE = enableOfflineMode;\n  isBackendAvailable = null;\n  isDatabaseAvailable = null;\n};","map":{"version":3,"names":["API_URL","API_TIMEOUT","DEFAULT_HEADERS","DEBUG_API_CALLS","DEBUG_IGNORE_BACKEND_FAILURE","isBackendAvailable","isDatabaseAvailable","checkBackendStatus","_ref","_asyncToGenerator","force","arguments","length","undefined","console","log","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","signal","clearTimeout","ok","error","status","statusText","message","apply","checkDatabaseStatus","_ref2","toggleOfflineMode","enableOfflineMode","window"],"sources":["/Users/tonyauge/Library/Mobile Documents/com~apple~CloudDocs/Code/budget/frontend/src/config/api.config.js"],"sourcesContent":["// Configuration de l'API g√©n√©r√©e automatiquement par le script de d√©ploiement\nexport const API_URL = \"http://127.0.0.1:8000\";\nexport const API_TIMEOUT = 30000; // 30 secondes\nexport const DEFAULT_HEADERS = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n};\nexport const DEBUG_API_CALLS = true; // Activer les logs de debugging pour les appels API\n\n// Mode hors-ligne - D√âCONSEILL√â\n// D√©sactiv√© par d√©faut car le mode hors-ligne n'est pas recommand√©\nexport const DEBUG_IGNORE_BACKEND_FAILURE = false;\n\n// Variable pour suivre l'√©tat de la connexion au backend\nlet isBackendAvailable = null;\nlet isDatabaseAvailable = null;\n\n/**\n * Fonction pour v√©rifier si le backend est disponible\n * @param {boolean} force - Force une nouvelle v√©rification m√™me si le statut est d√©j√† connu\n * @returns {Promise<boolean>} - true si le backend est disponible, false sinon\n */\nexport const checkBackendStatus = async (force = false) => {\n    // Si on a d√©j√† v√©rifi√© et qu'on ne force pas une nouvelle v√©rification\n    if (isBackendAvailable !== null && !force) {\n        console.log(`üîÑ Utilisation du statut backend en cache: ${isBackendAvailable ? 'Disponible' : 'Indisponible'}`);\n        return isBackendAvailable;\n    }\n    \n    try {\n        console.log('üîç V√©rification de la connexion au backend...');\n        \n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000); // Timeout de 5 secondes\n        \n        const response = await fetch(`${API_URL}/api/health`, {\n            method: 'GET',\n            headers: DEFAULT_HEADERS,\n            signal: controller.signal\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (response.ok) {\n            console.log('‚úÖ Connexion au backend √©tablie');\n            isBackendAvailable = true;\n            return true;\n        } else {\n            console.error(`‚ùå Erreur de connexion au backend: ${response.status} ${response.statusText}`);\n            isBackendAvailable = false;\n            return false;\n        }\n    } catch (error) {\n        console.error('‚ùå Impossible de se connecter au backend:', error.message);\n        console.error('‚ö†Ô∏è Le mode hors-ligne n\\'est pas recommand√©. Veuillez d√©marrer le backend.');\n        \n        isBackendAvailable = false;\n        return false;\n    }\n};\n\n/**\n * Fonction pour v√©rifier si MongoDB est disponible via le backend\n * @param {boolean} force - Force une nouvelle v√©rification m√™me si le statut est d√©j√† connu\n * @returns {Promise<boolean>} - true si la base de donn√©es est disponible, false sinon\n */\nexport const checkDatabaseStatus = async (force = false) => {\n    // Si on a d√©j√† v√©rifi√© et qu'on ne force pas une nouvelle v√©rification\n    if (isDatabaseAvailable !== null && !force) {\n        console.log(`üîÑ Utilisation du statut de la base de donn√©es en cache: ${isDatabaseAvailable ? 'Disponible' : 'Indisponible'}`);\n        return isDatabaseAvailable;\n    }\n    \n    try {\n        console.log('üîç V√©rification de la connexion √† la base de donn√©es...');\n        \n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000); // Timeout de 5 secondes\n        \n        const response = await fetch(`${API_URL}/api/health/db`, {\n            method: 'GET',\n            headers: DEFAULT_HEADERS,\n            signal: controller.signal\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (response.ok) {\n            console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');\n            isDatabaseAvailable = true;\n            return true;\n        } else {\n            console.error(`‚ùå Erreur de connexion √† la base de donn√©es: ${response.status} ${response.statusText}`);\n            isDatabaseAvailable = false;\n            return false;\n        }\n    } catch (error) {\n        console.error('‚ùå Impossible de v√©rifier le statut de la base de donn√©es:', error.message);\n        console.error('‚ö†Ô∏è La connexion √† la base de donn√©es est obligatoire. Veuillez v√©rifier MongoDB.');\n        \n        isDatabaseAvailable = false;\n        return false;\n    }\n}; \n\n/**\n * Fonction utilitaire pour basculer le mode hors-ligne\n * @param {boolean} enableOfflineMode - True pour activer le mode hors-ligne, false pour le d√©sactiver\n */\nexport const toggleOfflineMode = (enableOfflineMode) => {\n    // Cette fonction peut √™tre appel√©e par le script de d√©ploiement pour modifier le mode hors-ligne\n    console.log(`${enableOfflineMode ? 'üîå Activation' : 'üîå D√©sactivation'} du mode hors-ligne`);\n    window.DEBUG_IGNORE_BACKEND_FAILURE = enableOfflineMode;\n    // Reset des √©tats pour forcer une nouvelle v√©rification\n    isBackendAvailable = null;\n    isDatabaseAvailable = null;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}